{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/gloryleilaniwilliams/src/jeopardy-lite/src/App.js\",\n    _s = $RefreshSig$();\n\n// import logo from './logo.svg';\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport LandingPage from \"./components/landing-page\";\nimport GameBoardContainer from \"./components/game-board-container\";\nimport questionList from \"./questions.json\";\nimport LargeSingleItemContainer from './components/Large-single-item-container';\n\nfunction App() {\n  _s();\n\n  const [newView, setNewView] = useState(true);\n  const [round, setRound] = useState(1);\n  const [playerScore, setPlayerScore] = useState(0);\n  const [questions, setQuestions] = useState(null);\n  const [questionsRemaining, setQuestionsRemaining] = useState(true); // roundTimer = 600; //Seconds, counting down\n\n  const playGame = () => {\n    //console.log(\"new view pre:\", newView);\n    setNewView(false); //console.log(\"new view post:\", newView);\n  }; //Function to shuffle questions in categories and also answer choices per question\n\n\n  const shuffle = lst => {\n    for (let i = lst.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = lst[i];\n      lst[i] = lst[j];\n      lst[j] = temp;\n    }\n\n    ;\n  };\n\n  shuffle(questionList);\n  useEffect(() => {\n    //Add correct answer to list of answer choices\n    const answerChoices = [];\n\n    for (const item of questionList) {\n      const answerChoices = item.incorrect_answers;\n      answerChoices.push(item.correct_answer); //console.log(\"item:\", item);\n      //console.log(\"ans pre shuf:\", answerChoices);\n\n      shuffle(answerChoices); //console.log(\"ans post shuf:\", answerChoices);\n    }\n\n    setQuestions(questionList);\n  }, []); //console.log(\"questions state:\", questions);\n\n  console.log(\"round:\", round);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: newView ? /*#__PURE__*/_jsxDEV(LandingPage, {\n      play: playGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this) : [round === 3 ? /*#__PURE__*/_jsxDEV(LargeSingleItemContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(GameBoardContainer, {\n      questions: questions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 50\n    }, this)]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Ct05yll1YGV0lSAiTKHQ/C/ExR0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/gloryleilaniwilliams/src/jeopardy-lite/src/App.js"],"names":["React","useEffect","useState","LandingPage","GameBoardContainer","questionList","LargeSingleItemContainer","App","newView","setNewView","round","setRound","playerScore","setPlayerScore","questions","setQuestions","questionsRemaining","setQuestionsRemaining","playGame","shuffle","lst","i","length","j","Math","floor","random","temp","answerChoices","item","incorrect_answers","push","correct_answer","console","log"],"mappings":";;;;;AAAA;AACA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,wBAAP,MAAqC,0CAArC;;AAGA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACc,kBAAD,EAAqBC,qBAArB,IAA8Cf,QAAQ,CAAC,IAAD,CAA5D,CANa,CAOb;;AAEA,QAAMgB,QAAQ,GAAG,MAAM;AACrB;AACAT,IAAAA,UAAU,CAAC,KAAD,CAAV,CAFqB,CAGrB;AACC,GAJH,CATa,CAeX;;;AACA,QAAMU,OAAO,GAAIC,GAAD,IAAS;AAEvB,SAAK,IAAIC,CAAC,GAAED,GAAG,CAACE,MAAJ,GAAa,CAAzB,EAA4BD,CAAC,GAAC,CAA9B,EAAiCA,CAAC,EAAlC,EAAuC;AACrC,YAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,CAA3B,CAAV;AACA,YAAMM,IAAI,GAAGP,GAAG,CAACC,CAAD,CAAhB;AACAD,MAAAA,GAAG,CAACC,CAAD,CAAH,GAASD,GAAG,CAACG,CAAD,CAAZ;AACAH,MAAAA,GAAG,CAACG,CAAD,CAAH,GAASI,IAAT;AACD;;AAAA;AACJ,GARC;;AAWFR,EAAAA,OAAO,CAACd,YAAD,CAAP;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAM2B,aAAa,GAAG,EAAtB;;AAEA,SAAK,MAAMC,IAAX,IAAmBxB,YAAnB,EAAiC;AACjC,YAAMuB,aAAa,GAAGC,IAAI,CAACC,iBAA3B;AACAF,MAAAA,aAAa,CAACG,IAAd,CAAmBF,IAAI,CAACG,cAAxB,EAFiC,CAGjC;AACA;;AACAb,MAAAA,OAAO,CAACS,aAAD,CAAP,CALiC,CAMjC;AACD;;AACCb,IAAAA,YAAY,CAACV,YAAD,CAAZ;AACD,GAbQ,EAaN,EAbM,CAAT,CA7Ba,CA4Cb;;AACA4B,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBxB,KAAtB;AAEA,sBAEE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cACGF,OAAO,gBAAE,QAAC,WAAD;AAAa,MAAA,IAAI,EAAEU;AAAnB;AAAA;AAAA;AAAA;AAAA,YAAF,GACR,CAACR,KAAK,KAAG,CAAR,gBAAW,QAAC,wBAAD;AAAA;AAAA;AAAA;AAAA,YAAX,gBAA0C,QAAC,kBAAD;AAAoB,MAAA,SAAS,EAAEI;AAA/B;AAAA;AAAA;AAAA;AAAA,YAA3C;AAFF;AAAA;AAAA;AAAA;AAAA,UAFF;AAOD;;GAtDQP,G;;KAAAA,G;AA0DT,eAAeA,GAAf","sourcesContent":["// import logo from './logo.svg';\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport LandingPage from \"./components/landing-page\";\nimport GameBoardContainer from \"./components/game-board-container\";\nimport questionList from \"./questions.json\";\nimport LargeSingleItemContainer from './components/Large-single-item-container';\n\n\nfunction App() {\n  \n  const [newView, setNewView] = useState(true);\n  const [round, setRound] = useState(1);\n  const [playerScore, setPlayerScore] = useState(0);\n  const [questions, setQuestions] = useState(null);\n  const [questionsRemaining, setQuestionsRemaining] = useState(true);\n  // roundTimer = 600; //Seconds, counting down\n  \n  const playGame = () => {\n    //console.log(\"new view pre:\", newView);\n    setNewView(false);\n    //console.log(\"new view post:\", newView);\n    };\n\n    //Function to shuffle questions in categories and also answer choices per question\n    const shuffle = (lst) => {\n    \n      for (let i= lst.length - 1; i>0; i --) {\n        const j = Math.floor(Math.random() * i);\n        const temp = lst[i];\n        lst[i] = lst[j];\n        lst[j] = temp;\n      };\n  };\n\n\n  shuffle(questionList);\n\n  useEffect(() => {\n    //Add correct answer to list of answer choices\n    const answerChoices = [];\n    \n    for (const item of questionList) {\n    const answerChoices = item.incorrect_answers;\n    answerChoices.push(item.correct_answer);\n    //console.log(\"item:\", item);\n    //console.log(\"ans pre shuf:\", answerChoices);\n    shuffle(answerChoices);\n    //console.log(\"ans post shuf:\", answerChoices);\n  }\n    setQuestions(questionList);\n  }, []);\n\n  //console.log(\"questions state:\", questions);\n  console.log(\"round:\", round);\n\n  return (\n    \n    <div className=\"App\">\n      {newView? <LandingPage play={playGame} /> :\n      [round===3? <LargeSingleItemContainer /> : <GameBoardContainer questions={questions}/> ]}\n    </div>\n  );\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}