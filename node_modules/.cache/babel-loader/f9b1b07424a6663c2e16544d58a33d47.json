{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/gloryleilaniwilliams/src/jeopardy-lite/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// import logo from './logo.svg';\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport { Route, Switch, BrowserRouter as Router, useHistory } from 'react-router-dom'; //import LandingPage from \"./components/landing-page\";\n\nimport GameBoardContainer from \"./components/game-board-container\";\nimport questionList from \"./questions.json\";\nimport LargeSingleItemContainer from './components/large-single-item-container';\nimport GameBoardColumn from \"./components/game-board-column\";\nimport MainButton from \"./components/main-button\";\nimport { prependOnceListener } from 'process';\n\nfunction App() {\n  _s();\n\n  const [newView, setNewView] = useState(true);\n  const [round, setRound] = useState(1);\n  const [playerScore, setPlayerScore] = useState(0);\n  const [questions, setQuestions] = useState(null);\n  const [questionsRemaining, setQuestionsRemaining] = useState(true); // roundTimer = 600; //Seconds, counting down\n\n  const playGame = () => {\n    //console.log(\"new view pre:\", newView);\n    setNewView(false); //console.log(\"new view post:\", newView);\n  }; //Function to shuffle questions in categories and also answer choices per question\n\n\n  const shuffle = lst => {\n    for (let i = lst.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = lst[i];\n      lst[i] = lst[j];\n      lst[j] = temp;\n    }\n\n    ;\n  };\n\n  shuffle(questionList);\n  useEffect(() => {\n    //Add correct answer to list of answer choices\n    const answerChoices = [];\n\n    for (const item of questionList) {\n      const answerChoices = item.incorrect_answers;\n      answerChoices.push(item.correct_answer); //console.log(\"item:\", item);\n      //console.log(\"ans pre shuf:\", answerChoices);\n\n      shuffle(answerChoices); //console.log(\"ans post shuf:\", answerChoices);\n    }\n\n    setQuestions(questionList);\n  }, []); //console.log(\"questions state:\", questions);\n\n  console.log(\"round:\", round);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/question\",\n          children: /*#__PURE__*/_jsxDEV(LargeSingleItemContainer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/game-board\",\n          children: /*#__PURE__*/_jsxDEV(GameBoardContainer, {\n            questions: questions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          component: LandingPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Ct05yll1YGV0lSAiTKHQ/C/ExR0=\");\n\n_c = App;\n\nconst LandingPage = props => {\n  _s2();\n\n  const history = useHistory();\n\n  const play = () => {\n    history.push(`/game-board`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Jeopardy Lite\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Welcome! Would you like to play?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainButton, {\n      label: \"Play\",\n      play: play\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(LandingPage, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c2 = LandingPage;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"LandingPage\");","map":{"version":3,"sources":["/Users/gloryleilaniwilliams/src/jeopardy-lite/src/App.js"],"names":["React","useEffect","useState","Route","Switch","BrowserRouter","Router","useHistory","GameBoardContainer","questionList","LargeSingleItemContainer","GameBoardColumn","MainButton","prependOnceListener","App","newView","setNewView","round","setRound","playerScore","setPlayerScore","questions","setQuestions","questionsRemaining","setQuestionsRemaining","playGame","shuffle","lst","i","length","j","Math","floor","random","temp","answerChoices","item","incorrect_answers","push","correct_answer","console","log","LandingPage","props","history","play"],"mappings":"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","sourcesContent":["// import logo from './logo.svg';\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport { Route, Switch, BrowserRouter as Router, useHistory } from 'react-router-dom';\n\n//import LandingPage from \"./components/landing-page\";\nimport GameBoardContainer from \"./components/game-board-container\";\nimport questionList from \"./questions.json\";\nimport LargeSingleItemContainer from './components/large-single-item-container';\nimport GameBoardColumn from \"./components/game-board-column\";\nimport MainButton from \"./components/main-button\";\nimport { prependOnceListener } from 'process';\n\n\nfunction App() {\n  \n  const [newView, setNewView] = useState(true);\n  const [round, setRound] = useState(1);\n  const [playerScore, setPlayerScore] = useState(0);\n  const [questions, setQuestions] = useState(null);\n  const [questionsRemaining, setQuestionsRemaining] = useState(true);\n  // roundTimer = 600; //Seconds, counting down\n  \n  const playGame = () => {\n    //console.log(\"new view pre:\", newView);\n    setNewView(false);\n    //console.log(\"new view post:\", newView);\n    };\n\n    //Function to shuffle questions in categories and also answer choices per question\n    const shuffle = (lst) => {\n      for (let i= lst.length - 1; i>0; i --) {\n        const j = Math.floor(Math.random() * i);\n        const temp = lst[i];\n        lst[i] = lst[j];\n        lst[j] = temp;\n      };\n  };\n\n\n  shuffle(questionList);\n\n  useEffect(() => {\n    //Add correct answer to list of answer choices\n    const answerChoices = [];\n    \n    for (const item of questionList) {\n    const answerChoices = item.incorrect_answers;\n    answerChoices.push(item.correct_answer);\n    //console.log(\"item:\", item);\n    //console.log(\"ans pre shuf:\", answerChoices);\n    shuffle(answerChoices);\n    //console.log(\"ans post shuf:\", answerChoices);\n  }\n    setQuestions(questionList);\n  }, []);\n\n  //console.log(\"questions state:\", questions);\n  console.log(\"round:\", round);\n\n\n  return (\n    <React.Fragment>\n      <div className=\"App\">\n        {/* {newView? <LandingPage play={playGame} /> :\n        [round===3? <LargeSingleItemContainer /> : <GameBoardContainer questions={questions}/> ]} */}\n      </div>\n\n      <Router>\n        <Switch>\n          <Route path=\"/question\">\n            <LargeSingleItemContainer />\n          </Route>\n          {/* <Route path=\"/round\" component={Round}></Route>*/}\n          <Route path=\"/game-board\"> \n            <GameBoardContainer questions={questions} />\n          </Route>\n          <Route path=\"/\" component={LandingPage}></Route>  \n        </Switch>\n      </Router>\n\n    </React.Fragment>\n  );\n}\n\n  \nconst LandingPage = props => {\n\n  const history = useHistory();\n    \n  const play = () => {\n    history.push(`/game-board`);\n  };\n\n  return (\n    <div> \n      <h1> Jeopardy Lite</h1>\n      <p> Welcome! Would you like to play?</p> \n      <MainButton label=\"Play\" play={play}/>\n    </div>\n  )\n}; \n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}